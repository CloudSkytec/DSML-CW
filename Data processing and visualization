import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer,KNNImputer
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import AdaBoostClassifier,RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.decomposition import PCA
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
from sklearn.metrics import balanced_accuracy_score
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.dates as mdates

# set global drawing parameters
plt.rcParams.update({
    'font.size': 14,
    'lines.linewidth': 2,
    'lines.markersize': 8
})

#%%
# # Step 0: Loading Data
# from ucimlrepo import fetch_ucirepo
#
# # fetch dataset
# dow_jones_index = fetch_ucirepo(id=312)
#
# # data (as pandas dataframes)
# X = dow_jones_index.data.features
# y = dow_jones_index.data.targets
#
# # metadata
# print(dow_jones_index.metadata)
#
# # variable information
# print(dow_jones_index.variables)
#%%
file_path = './data/dow_jones_index.csv'

df = pd.read_csv(file_path)

X = df.drop(columns=['percent_change_next_weeks_price'])

y = df['percent_change_next_weeks_price']

cols_to_convert = [
    'open', 'high', 'low', 'close', 'volume',
    'percent_change_price', 'percent_change_volume_over_last_wk',
    'previous_weeks_volume', 'next_weeks_open', 'next_weeks_close',
    'days_to_next_dividend', 'percent_return_next_dividend'
]

# remove '$' and ',' from each column and convert them to numerical values
for col in cols_to_convert:
    X[col] = X[col].astype(str).str.replace(r'[\$,]', '', regex=True)
    X[col] = pd.to_numeric(X[col], errors='coerce')

# date conversion
if 'date' in X.columns:
    X['date'] = pd.to_datetime(X['date'], errors='coerce')
else:
    X['date'] = pd.date_range(start='2000-01-01', periods=len(X), freq='W')

# sort by date
X.sort_values(by='date', inplace=True)

# get all stock codes
unique_stocks = sorted(X['stock'].unique())

# generate color mapping based on the number of stocks
colors = plt.cm.tab20(np.linspace(0, 1, len(unique_stocks)))
color_dict = dict(zip(unique_stocks, colors))

start_limit = pd.to_datetime("2011-01-01")
end_limit = pd.to_datetime("2011-07-02")
unique_dates = np.array(sorted(X['date'].unique()))
ticks = unique_dates[(unique_dates >= start_limit) & (unique_dates <= end_limit)]
ticks = pd.to_datetime(ticks).to_pydatetime().tolist()

#%%
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(22, 20))

for stock in unique_stocks:
    stock_data = X[X['stock'] == stock]

    ax1.plot(stock_data['date'], stock_data['open'], marker='o',
             label=stock, color=color_dict[stock])

    ax2.plot(stock_data['date'], stock_data['close'], marker='o',
             label=stock, color=color_dict[stock])

ax1.set_xlabel('Date', fontsize=16)
ax1.set_ylabel('Open', fontsize=16)
ax1.set_title('Open Price of Stock', fontsize=18)
ax1.set_xlim(start_limit, end_limit)
ax1.set_xticks(ticks)
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
ax1.tick_params(axis='x', rotation=45)

ax2.set_xlabel('Date', fontsize=16)
ax2.set_ylabel('Close', fontsize=16)
ax2.set_title('Close Price of Stock', fontsize=18)
ax2.set_xlim(start_limit, end_limit)
ax2.set_xticks(ticks)
ax2.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
ax2.tick_params(axis='x', rotation=45)

# add public legend
handles, labels = ax1.get_legend_handles_labels()
max_columns = 10
ncol = min(max_columns, len(unique_stocks))

fig.legend(handles, labels, loc='upper center', bbox_to_anchor=(0.5, -0.01),
           ncol=ncol, fontsize=15, title='Stock', title_fontsize=20)

plt.subplots_adjust(left=0.08, right=0.98, top=0.93, bottom=0.07, hspace=0.4)

plt.show()

#%%
fig, ax1 = plt.subplots(figsize=(25, 14))

start_limit = pd.to_datetime("2011-01-01")
end_limit = pd.to_datetime("2011-07-02")
unique_dates = np.array(sorted(X['date'].unique()))
ticks = unique_dates[(unique_dates >= start_limit) & (unique_dates <= end_limit)]
ticks = pd.to_datetime(ticks).to_pydatetime().tolist()

for stock in unique_stocks:
    stock_data = X[X['stock'] == stock]
    ax1.plot(stock_data['date'], stock_data['volume'], marker='o', label=stock,
             color=color_dict[stock])

ax1.set_xlabel('Date', fontsize=16)
ax1.set_ylabel('Volume', fontsize=16)
ax1.set_title('Volume Trend by Stock', fontsize=18)
ax1.set_xlim(start_limit, end_limit)
ax1.set_xticks(ticks)
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
ax1.tick_params(axis='x', rotation=45)

max_columns = 10
ncol = min(max_columns, len(unique_stocks))
ax1.legend(title='Stock', loc='upper center',
           bbox_to_anchor=(0.5, -0.08),
           ncol=ncol, fontsize=15, title_fontsize=20)

plt.subplots_adjust(left=0.08, right=0.98, top=0.93, bottom=0)
plt.show()

#%%
X['high_low_diff'] = X['high'] - X['low']

fig, ax = plt.subplots(figsize=(25, 14))

sns.boxplot(x='stock', y='high_low_diff', data=X, palette=color_dict, ax=ax)

ax.set_title('High-Low Price Difference Distribution', fontsize=18)
ax.set_xlabel('Stock', fontsize=16)
ax.set_ylabel('High-Low Difference', fontsize=16)

plt.xticks(rotation=45)

plt.subplots_adjust(left=0.08, right=0.98, top=0.93, bottom=0.08)

plt.show()
#%%
X = X.drop(columns=['quarter'])
X = X.drop(columns=['high_low_diff'])

numeric_cols = X.select_dtypes(include=[np.number]).columns
corr_matrix = X[numeric_cols].corr()

fig, ax = plt.subplots(figsize=(25, 14))

heatmap = sns.heatmap(corr_matrix, annot=True, fmt=".2f", cmap='coolwarm', cbar_kws={"shrink": 0.8}, ax=ax)

ax.set_title('Correlation Heatmap of Numeric Features', fontsize=18)

plt.xticks(rotation=45)

plt.subplots_adjust(left=0.08, right=0.98, top=0.93, bottom=0.08)

plt.show()
